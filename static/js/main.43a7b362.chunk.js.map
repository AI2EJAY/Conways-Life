{"version":3,"sources":["components/Grid.js","App.js","index.js"],"names":["Grid","react_default","a","createElement","onClick","this","props","className","data","Component","AppContainer","styled","div","_templateObject","SpeedContainer","_templateObject2","GridWrapper","_templateObject3","App","state","grid","Object","toConsumableArray","Array","map","e","fill","play","view","gen","speed","random","togglePlay","console","log","_this","setState","gameLoop","timeoutHandler","window","clearTimeout","toggleActive","x","y","concat","JSON","parse","stringify","logic","arr","val","isDefined","length","playing","undefined","checkNeighbors","neighbors","newNeighbors","push","i","gridSetup","element","components_Grid","clear","newGrid","changeSpeed","button","newSpeed","randomGrid","num","forEach","nested","getRandomInt","ms","Promise","resolve","setTimeout","_this2","rows","max","Math","floor","_this3","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.43a7b362.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Grid extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.props.onClick} className={this.props.data ? \"Block_On\" : \"Block\"} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;","import React, { Component } from \"react\";\r\nimport Grid from \"./components/Grid\";\r\nimport Play from \"./components/Play\";\r\nimport Pause from \"./components/Pause\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst AppContainer = styled.div`\r\n  background-color: black;\r\n  height: 100vh;\r\n  min-height: 900px;\r\n  width: 100%;\r\n  background-color: black;\r\n  margin-top: -22px;\r\n  padding-left: 20px;\r\n  h1 {\r\n    color: palegoldenrod;\r\n  }\r\n  p {\r\n    color: palegoldenrod;\r\n  }\r\n`;\r\n\r\nconst SpeedContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nconst GridWrapper = styled.div`\r\n  display: flex;\r\n  width: 500px;\r\n  flex-wrap: wrap;\r\n  box-sizing: border-box;\r\n  margin-bottom: 2px;\r\n`;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    grid: [...Array(25)].map(e => Array(25).fill(0)),\r\n    play: 0,\r\n    view: [],\r\n    gen: 0,\r\n    speed: 500,\r\n    random: 0\r\n  };\r\n\r\n  togglePlay = e => {\r\n    console.log(\"togglePlay fired!\");\r\n    if (this.state.play === 0) {\r\n      this.setState({ play: 1 }, this.gameLoop);\r\n    } else {\r\n      this.setState({ play: 0 });\r\n      if (this.timeoutHandler) {\r\n        window.clearTimeout(this.timeoutHandler);\r\n        this.timeoutHandler = null;\r\n      }\r\n    }\r\n  };\r\n\r\n  toggleActive = (x, y) => {\r\n    console.log(`toggleActive fired! x:${x} y:${y}`);\r\n    let grid = JSON.parse(JSON.stringify(this.state.grid));\r\n    if (grid[y][x] === 0) {\r\n      grid[y][x] = 1;\r\n    } else {\r\n      grid[y][x] = 0;\r\n    }\r\n    this.setState({ grid });\r\n  };\r\n\r\n  sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  gameLoop() {\r\n    let view = [...Array(25)].map(rows => Array(25).fill(0));\r\n    this.state.grid.forEach((nested, y) => {\r\n      nested.forEach((element, x) => {\r\n        const neighbors = this.checkNeighbors(x, y);\r\n        this.logic(view, neighbors, x, y);\r\n      });\r\n    });\r\n\r\n    this.setState(state => {\r\n      return {\r\n        grid: view,\r\n        gen: state.gen + 1\r\n      };\r\n    });\r\n\r\n    if (this.state.play) {\r\n      this.timeoutHandler = window.setTimeout(() => {\r\n        this.gameLoop();\r\n      }, this.state.speed);\r\n    }\r\n  }\r\n\r\n  logic = (view, arr, x, y) => {\r\n    let val = this.state.grid[y][x];\r\n    if (this.isDefined(this.state.grid, y, x) != -1) {\r\n      if (val === 1) {\r\n        view[y][x] = arr.length < 2 || arr.length > 3 ? 0 : 1;\r\n      } else {\r\n        view[y][x] = arr.length === 3 ? 1 : 0;\r\n      }\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    this.setState({ view: [...this.state.grid] });\r\n  }\r\n\r\n  playing = () => {\r\n    if (this.state.play === 0) {\r\n      return <button onClick={this.togglePlay}>Play</button>;\r\n    }\r\n    return <button onClick={this.togglePlay}>Pause</button>;\r\n  };\r\n\r\n  isDefined = (arr, y, x) => {\r\n    if (arr[y] === undefined) {\r\n      return -1;\r\n    } else if (arr[y][x] === undefined) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  };\r\n\r\n  checkNeighbors = (x, y) => {\r\n    let neighbors = [];\r\n    const newNeighbors = [];\r\n\r\n    neighbors.push([y - 1, x]); // north\r\n    neighbors.push([y - 1, x - 1]); // north/west\r\n    neighbors.push([y - 1, x + 1]); //north east\r\n    neighbors.push([y, x + 1]); // east\r\n    neighbors.push([y, x - 1]); // west\r\n    neighbors.push([y + 1, x]); // south\r\n    neighbors.push([y + 1, x - 1]); //south/west\r\n    neighbors.push([y + 1, x + 1]); // south/east\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n      if (\r\n        this.isDefined(this.state.grid, neighbors[i][0], neighbors[i][1]) !==\r\n          -1 &&\r\n        this.state.grid[neighbors[i][0]][neighbors[i][1]] === 1\r\n      ) {\r\n        newNeighbors.push(neighbors[i]);\r\n      }\r\n    }\r\n    return newNeighbors;\r\n  };\r\n\r\n  gridSetup = (x, y, element) => {\r\n    if (this.state.play === 0) {\r\n      console.log(`it${y}, ${x}, and it should be set to ${element}`);\r\n      return (\r\n        <Grid // each individual cell\r\n          onClick={() => this.toggleActive(x, y)}\r\n          data={element}\r\n          grid={this.state.grid}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <Grid\r\n          onClick={null}\r\n          data={element}\r\n          grid={this.state.grid}\r\n          gridSetup={this.gridSetup}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  clear = () => {\r\n    const newGrid = [...Array(25)].map(e => Array(25).fill(0));\r\n    this.setState({ grid: newGrid, gen: 0, random: 0 });\r\n    if (this.state.play === 1) {\r\n      this.setState({ play: 0, gen: 0, random: 0 });\r\n      if (this.timeoutHandler) {\r\n        window.clearTimeout(this.timeoutHandler);\r\n        this.timeoutHandler = null;\r\n      }\r\n    }\r\n  };\r\n\r\n  changeSpeed = button => {\r\n    if (button === \"+\") {\r\n      let newSpeed = this.state.speed - 100;\r\n      if (newSpeed <= 2000 && newSpeed >= 100) {\r\n        this.setState({ speed: newSpeed });\r\n      } else {\r\n        this.setState({ speed: 100 });\r\n      }\r\n    }\r\n    if (button === \"++\") {\r\n      let newSpeed = this.state.speed - 250;\r\n      if (newSpeed <= 2000 && newSpeed >= 100) {\r\n        this.setState({ speed: newSpeed });\r\n      } else {\r\n        this.setState({ speed: 100 });\r\n      }\r\n    }\r\n    if (button === \"-\") {\r\n      let newSpeed = this.state.speed + 100;\r\n      if (newSpeed <= 2000 && newSpeed >= 100) {\r\n        this.setState({ speed: newSpeed });\r\n      } else {\r\n        this.setState({ speed: 2000 });\r\n      }\r\n    }\r\n    if (button === \"--\") {\r\n      let newSpeed = this.state.speed + 250;\r\n      if (newSpeed <= 2000 && newSpeed >= 100) {\r\n        this.setState({ speed: newSpeed });\r\n      } else {\r\n        this.setState({ speed: 2000 });\r\n      }\r\n    }\r\n  };\r\n  getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n\r\n  randomGrid = () => {\r\n    let num;\r\n    let newGrid = [...Array(25)].map(e => Array(25).fill(0));\r\n    newGrid.forEach((nested, y) =>\r\n      nested.forEach((element, x) => {\r\n        num = this.getRandomInt(2); // output 0 or 1\r\n        newGrid[y][x] = num;\r\n        console.log(`inside of random grid call : ${y}, ${x}, ${num}`);\r\n      })\r\n    );\r\n    this.setState({ grid: newGrid });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <AppContainer>\r\n        <h1>Game of Life</h1>\r\n        <h1>{this.state.play ? \"Game is running...\" : \"Game is stopped\"}</h1>\r\n        <GridWrapper>\r\n          {this.state.grid.map((nested, y) =>\r\n            nested.map((element, x) => this.gridSetup(x, y, element))\r\n          )}\r\n        </GridWrapper>\r\n        {this.playing()}\r\n        <button onClick={this.clear}> Clear </button>\r\n        <button onClick={this.randomGrid}>Randomize</button>\r\n        <SpeedContainer>\r\n          <p>Speed: &nbsp;</p>\r\n          <button onClick={() => this.changeSpeed(\"--\")}> &lt;&lt; </button>\r\n          <button onClick={() => this.changeSpeed(\"-\")}> &lt; </button>\r\n          <button onClick={() => this.changeSpeed(\"+\")}>&gt; </button>\r\n          <button onClick={() => this.changeSpeed(\"++\")}> &gt;&gt; </button>\r\n        </SpeedContainer>\r\n        <div>\r\n          <p>\r\n            The Game of Life, also known simply as Life, is a cellular automaton\r\n            devised by the British mathematician John Horton Conway in 1970. The\r\n            game is a zero-player game, meaning that its evolution is determined\r\n            by its initial state, requiring no further input.\r\n          </p>\r\n          <p>\r\n            The game has a simple set of rules. The direct cells surrounding a\r\n            cell are refered to as neighbors and if a cell has:\r\n            <br />\r\n            0/1 Neighbors the cell will parish <br />\r\n            2/3 Neighbors the cell will live If the cell <br />\r\n            has more than 3 neighbors it will die as if overpopulation\r\n            <br />\r\n          </p>\r\n        </div>\r\n      </AppContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n\r\n"],"sourceRoot":""}